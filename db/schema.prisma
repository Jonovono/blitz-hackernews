// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens    Token[]
  sessions  Session[]
  entries   Entry[]
  votes     Vote[]
  hides     Hide[]
  favorites Favorite[]
  comments  Comment[]
}

model Hide {
  user    User @relation(fields: [userId], references: [id])
  userId  Int
  entryId Int

  @@unique([userId, entryId])
}

model Favorite {
  user    User @relation(fields: [userId], references: [id])
  userId  Int
  entryId Int

  @@unique([userId, entryId])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model Entry {
  id        Int      @id @default(autoincrement())
  type      String
  title     String
  link      String?
  siteName  String?
  content   String?
  createdAt DateTime @default(now())

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  votes    Vote[]
  comments Comment[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  entry     Entry?   @relation(fields: [entryId], references: [id])
  entryId   Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Comment {
  id        Int       @id @default(autoincrement())
  parentId  Int?
  parent    Comment?  @relation("CommentReply", fields: [parentId], references: [id])
  children  Comment[] @relation("CommentReply")
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  entry   Entry @relation(fields: [entryId], references: [id])
  entryId Int

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  votes Vote[]
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }
